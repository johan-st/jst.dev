// Code generated by templ@v0.2.334 DO NOT EDIT.

package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

type Link struct {
	Active   bool
	Url      string
	Text     string
	External bool
}

func link(li Link) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_2 = []any{"link", templ.KV("active", li.Active)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_2...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a href=\"")
		if err != nil {
			return err
		}
		var var_3 templ.SafeURL = templ.URL(li.Url)
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_3)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		if li.External {
			_, err = templBuffer.WriteString(" target=\"_blank\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_2).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var var_4 string = li.Text
		_, err = templBuffer.WriteString(templ.EscapeString(var_4))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func spinner(spinnerId string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_5 := templ.GetChildren(ctx)
		if var_5 == nil {
			var_5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_6 = []any{"spinner", "htmx-indicator"}
		err = templ.RenderCSSItems(ctx, templBuffer, var_6...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div id=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(spinnerId))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_6).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><style>")
		if err != nil {
			return err
		}
		var_7 := `.spinner_8XMC{animation:spinner_0zVw 2s infinite}.spinner_WWWR{animation:spinner_Aojx 2s infinite}.spinner_LvYV{transform-origin:center;animation:spinner_xygp .75s linear infinite}@keyframes spinner_0zVw{0%{animation-timing-function:cubic-bezier(0.36,.62,.43,.99);cx:5px}50%{animation-timing-function:cubic-bezier(0.79,0,.58,.57);cx:8px}}@keyframes spinner_Aojx{0%{animation-timing-function:cubic-bezier(0.36,.62,.43,.99);cx:19px}50%{animation-timing-function:cubic-bezier(0.79,0,.58,.57);cx:16px}}@keyframes spinner_xygp{100%{transform:rotate(360deg)}}`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</style><defs><filter id=\"spinner-gF01\"><feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"1\" result=\"y\"></feGaussianBlur><feColorMatrix in=\"y\" mode=\"matrix\" values=\"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 18 -7\" result=\"z\"></feColorMatrix><feBlend in=\"SourceGraphic\" in2=\"z\"></feBlend></filter></defs><g class=\"spinner_LvYV\" filter=\"url(#spinner-gF01)\"><circle class=\"spinner_8XMC\" cx=\"5\" cy=\"12\" r=\"4\"></circle><circle class=\"spinner_WWWR\" cx=\"19\" cy=\"12\" r=\"4\"></circle></g></svg></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
