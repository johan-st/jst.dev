// Code generated by templ@v0.2.334 DO NOT EDIT.

package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

type BlogPost struct {
	Title   string
	Author  string
	Excerpt string
	Glob    string
	Full    string
}

func AiStories(posts []BlogPost) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<style>")
		if err != nil {
			return err
		}
		var_2 := `
    main>h1{
        font-size: 3em;
        text-align: center;
    }
    main>section{
        border: 1px solid --var(--clr-border);
        padding: 1em;
        margin: 1em;
        border-radius: var(--border-radius);
    }
    .post-full {
        display: none;
    }
    .read-more {
        cursor: pointer;
        color: blue;
    }
`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</style><h1>")
		if err != nil {
			return err
		}
		var_3 := `Amazing Stories from the Mind of...`
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1>")
		if err != nil {
			return err
		}
		for _, post := range posts {
			_, err = templBuffer.WriteString("<section class=\"post\"><h2 class=\"post-title\">")
			if err != nil {
				return err
			}
			var var_4 string = post.Title
			_, err = templBuffer.WriteString(templ.EscapeString(var_4))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h2><p class=\"post-author\">")
			if err != nil {
				return err
			}
			var var_5 string = post.Author
			_, err = templBuffer.WriteString(templ.EscapeString(var_5))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p><p class=\"post-excerpt\">")
			if err != nil {
				return err
			}
			var var_6 string = post.Excerpt
			_, err = templBuffer.WriteString(templ.EscapeString(var_6))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p><p class=\"post-full\">")
			if err != nil {
				return err
			}
			var var_7 string = post.Full
			_, err = templBuffer.WriteString(templ.EscapeString(var_7))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p><p class=\"read-more\">")
			if err != nil {
				return err
			}
			var_8 := `Read More`
			_, err = templBuffer.WriteString(var_8)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p></section>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<script>")
		if err != nil {
			return err
		}
		var_9 := `
    const readMoreButtons = document.querySelectorAll('.read-more');
    readMoreButtons.forEach(button => {
        button.addEventListener('click', () => {
            const postFull = button.previousElementSibling;
            postFull.style.display = 'block';
            button.style.display = 'none';
        });
    });
`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
